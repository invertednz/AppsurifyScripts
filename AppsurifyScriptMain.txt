echo "start"
#get commit
commitId=`git log -1 --pretty="%H"`
echo $commitId


###########################
#replace mvn -Dtest=$finalTestNames test with your command to run the tests using $finalTestNames as the variable of tests to run

#######Configuration
#how to run tests
#use full names - value True or False - True will return the classname.name i.e. if your test is <testcase classname="junit.TestRun" name="PassToFail" time="0.008"> then it would return junit.TestRun.PasstoFail
fullname="False"
#url
url="http://appsurify.dev.appsurify.com"
#API Key
apiKey="MTpEbzhXQThOaW14bHVQTVdZZXNBTTVLT0xhZ00"
#Project - can also use project id but then project_name will need to be changed to project
project="2"
#Test Suite - can also use test suite id but then test_suite_name needs to be changed to test_suite
testsuite="1"
#report directory
report=./target/surefire-reports/*.xml
#If any additional text is required before the test name then put it here example starttests="sample.junit.PriorityTest#" if not storing the classname
starttests="sample.junit.PriorityTest#"
importtype="junit"


#Tests to run
#Options - True, False, Red and Orange.  Red and Orange indicates if we are only to run them if the the risk is red or orange.
#run high
high="True"
#run medium
medium="Red"
#run low
low="False"
#run unassigned
unassigned="True"
#rerun tests
rerun="True"
#run tests with open defects associated with them
open="True"
#run tests with defects which are ready to test associated with them
ready="True"



#Variables do not change
run_id=""
#Max tests to run per iteration
maxtests=10000000000

#TODO
#Fail early
#rerun after each stage
#fail on new defects
#fail on any failures
#fail on reopened defects
#fail on max failures
#fail on max flaky tests

#For Testing
commitId="e8056a83e26be8d05fbce5c3348c35b8b538fed1"


#get risk of commit and tests to run
json=`curl --header "token: $apiKey" "$url/api/external/commit-risk/?project_name=$project&commit=$commitId" | sed 's/\"//g'`
commitrisk=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  grep -w level ` ; echo $commitrisk
echo $commitrisk
#example level:2
runhigh="False"
if [[ ( $commitrisk == "level:1" && ( $high == "Red" || $high == "Orange") ) || ( $commitrisk == "level:2" && $high == "Orange" ) || ( $high == "True" )]] ; then runhigh="True" ; fi
runmedium="False"
if [[ ( $commitrisk == "level:1" && ( $medium == "Red" || $medium == "Orange") ) || ( $commitrisk == "level:2" && $medium == "Orange" ) || ( $medium == "True" )]] ; then runmedium="True" ; fi
runlow="False"
if [[ ( $commitrisk == "level:1" && ( $low == "Red" || $low == "Orange") ) || ( $commitrisk == "level:2" && $low == "Orange" ) || ( $low == "True" )]] ; then runlow="True" ; fi
rununassigned="False"
if [[ ( $commitrisk == "level:1" && ( $unassigned == "Red" || $unassigned == "Orange") ) || ( $commitrisk == "level:2" && $unassigned == "Orange" ) || ( $unassigned == "True" )]] ; then rununassigned="True" ; fi
runrerun="False"
if [[ ( $commitrisk == "level:1" && ( $rerun == "Red" || $rerun == "Orange") ) || ( $commitrisk == "level:2" && $rerun == "Orange" ) || ( $rerun == "True" )]] ; then runrerun="True" ; fi
runopen="False"
if [[ ( $commitrisk == "level:1" && ( $open == "Red" || $open == "Orange") ) || ( $commitrisk == "level:2" && $open == "Orange" ) || ( $open == "True" )]] ; then runopen="True" ; fi
runready="False"
if [[ ( $commitrisk == "level:1" && ( $ready == "Red" || $ready == "Orange") ) || ( $commitrisk == "level:2" && $ready == "Orange" ) || ( $ready == "True" )]] ; then runready="True" ; fi


#get tests to run for commit
#Run High tests

#####Testing also change 5 to 1
runhigh="True"

finalTestNames=""
if [[ $runhigh == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=5&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $runhigh == "True" ]] ; then echo $json ; fi
if [[ $runhigh == "True" ]] ; then prop="name" ; fi
if [[ $runhigh == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $runhigh == "True" ]] ; then echo $values ; fi
if [[ $runhigh == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $runhigh == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $runhigh == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############

##Testing
project="60"
#Test Suite
testsuite="20"
#commit
commitId="f4ac5c84878ddaf4b9a3c5a48475cbbdee7faf0a"
#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi

#Run Medium tests


finalTestNames=""
if [[ $runmedium == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=2&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $runmedium == "True" ]] ; then echo $json ; fi
if [[ $runmedium == "True" ]] ; then prop="name" ; fi
if [[ $runmedium == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $runmedium == "True" ]] ; then echo $values ; fi
if [[ $runmedium == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $runmedium == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $runmedium == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############


#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi


#Run Low tests


finalTestNames=""
if [[ $runlow == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=3&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $runlow == "True" ]] ; then echo $json ; fi
if [[ $runlow == "True" ]] ; then prop="name" ; fi
if [[ $runlow == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $runlow == "True" ]] ; then echo $values ; fi
if [[ $runlow == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $runlow == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $runlow == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############


#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi


#Run unassigned tests


finalTestNames=""
if [[ $rununassigned == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=4&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $rununassigned == "True" ]] ; then echo $json ; fi
if [[ $rununassigned == "True" ]] ; then prop="name" ; fi
if [[ $rununassigned == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $rununassigned == "True" ]] ; then echo $values ; fi
if [[ $rununassigned == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $rununassigned == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $rununassigned == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############


#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi


#Run Ready tests


finalTestNames=""
if [[ $runready == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=6&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $runready == "True" ]] ; then echo $json ; fi
if [[ $runready == "True" ]] ; then prop="name" ; fi
if [[ $runready == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $runready == "True" ]] ; then echo $values ; fi
if [[ $runready == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $runready == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $runready == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############

#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi


#Run Open tests


finalTestNames=""
if [[ $runopen == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=7&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $runopen == "True" ]] ; then echo $json ; fi
if [[ $runopen == "True" ]] ; then prop="name" ; fi
if [[ $runopen == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $runopen == "True" ]] ; then echo $values ; fi
if [[ $runopen == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $runopen == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $runopen == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############


#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi


#Run Rerun tests


finalTestNames=""
if [[ $runrerun == "True" ]] ; then json=`curl --header "token: $apiKey" "$url/api/external/prioritized-tests/?project_name=$project&priority=5&full_name=$fullname&test_suite_name=$testsuite&commit=$commitId" | sed 's/\"//g'` ; fi
if [[ $runrerun == "True" ]] ; then echo $json ; fi
if [[ $runrerun == "True" ]] ; then prop="name" ; fi
if [[ $runrerun == "True" ]] ; then values=`echo $json | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep -w $prop | sed 's/\[//g' | sed 's/\]//g' | sed 's/name://g' ` ; fi
if [[ $runrerun == "True" ]] ; then echo $values ; fi
if [[ $runrerun == "True" ]] ; then if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi ; fi
if [[ $runrerun == "True" ]] ; then for testName in $values; do count=$((count+1));  echo $count; if [ $(( $count % $maxtests )) -eq "0" ]; then finalTestNames=$finalTestNames`echo $starttests$testName,`; finalTestNames=`echo $finalTestNames | sed 's/,$//g'`; mvn -Dtest=$finalTestNames test ; finalTestNames=""; else finalTestNames=$finalTestNames`echo $starttests$testName,`; fi;done ; fi
if [[ $runrerun == "True" ]] ; then finalTestNames=`echo $finalTestNames | sed 's/,$//g'` ; fi
if [[ $finalTestNames != "" ]] ; then mvn -Dtest=$finalTestNames test ; fi
############


#push test results to Appsurify
if [[ $finalTestNames != "" ]] ; then fileName=`ls $report` ;fi
if [[ $finalTestNames != "" ]] ; then echo $fileName ; fi
if [[ $finalTestNames != "" ]] ; then import=`curl -X POST http://appsurify.dev.appsurify.com/api/external/import/ -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -H "token: $apiKey" -F "file=@$fileName" -F 'project_name'=$project -F 'test_suite_name'=$testsuite -F 'type'=$importtype -F 'commit'=$commitId` ; fi
if [[ $finalTestNames != "" ]] ; then echo $import ; fi
#get testrun id
if [[ $finalTestNames != "" ]] ; then var=`echo $import | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  sed '10p;d' ` ; fi
echo $var
if [[ $finalTestNames != "" && $run_id == "" ]] ; then run_id=`echo $var | sed 's/test_run_id:/test_run\=/g' ` ; fi
#print testrun name
if [[ $finalTestNames != "" ]] ; then echo $run_id ; fi



################################################################
#get results
if [[ $finalTestNames != "" ]] ; then finalRes=`curl --header "token: $apiKey" "$url/api/external/output/?${run_id}" ` ; echo $finalRes ; fi
if [[ $finalTestNames != "" ]] ; then new_defects=`echo $finalRes | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  grep -w new_defects ` ; echo $new_defects ; fi
v=`echo $finalRes | sed 's/failed_test:/\"/g'` 
if [[ $finalTestNames != "" ]] ; then reopened_defects=`echo $finalRes | sed 's/\\\\\//\//g' | sed 's/[{}]//g' |tr "," "\n" | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' |  grep -w reopened_defects ` ; echo $reopened_defects ; fi
if [[ $finalTestNames != "" ]] ; then echo $finalRes ; fi
if [[ $finalTestNames != "" ]] ; then echo $reopened_defects ; fi
if [[ $finalTestNames != "" ]] ; then if [[ $new_defects != "new_defects:0" || $reopened_defects != "reopened_defects:0" ]] ; then exit 1 ; fi ; fi

#####
#Exit if no tests found
#if [[ $json != *"name"* ]] ; then echo "No test found" ; values="" ; fi